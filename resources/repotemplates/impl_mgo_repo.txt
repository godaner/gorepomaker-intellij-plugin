
////////////////////////////////////////////////// ${entityMongoRepoName} //////////////////////////////////////////////////

//持久层mongo实现
type ${entityMongoRepoName} struct {
	MongoClient *mongo.Client `inject:"mongoclient"`
}

//查询一条${entityName}记录
func (this *${entityMongoRepoName}) Query${entityName}One(query map[string]interface{}) (*SELFENTITY.${entityName}, error) {
	entity := SELFENTITY.${entityName}{}
	err := this.MongoClient.Database(CONFIG.MgoDBName).Collection(SELFENTITY.${entityName}Col).FindOne(TC.TimeoutCtx.GetMongoOperate(0), query).Decode(&entity)
	if err != nil {
		return nil, err
	}
	return &entity, nil
}

//通过主键查询一条${entityName}记录
func (this *${entityMongoRepoName}) Get${entityName}ByID(id interface{}) (*SELFENTITY.${entityName}, error) {
	entity := SELFENTITY.${entityName}{}
	err := this.MongoClient.Database(CONFIG.MgoDBName).Collection(SELFENTITY.${entityName}Col).FindOne(TC.TimeoutCtx.GetMongoOperate(0), map[string]interface{}{"_id": id}).Decode(&entity)
	if err != nil {
		return nil, err
	}
	return &entity, nil
}

//查询${entityName}指定字段
func (this *${entityMongoRepoName}) Query${entityName}Distinct(query map[string]interface{}, field string, result interface{}) error {
	var err error
	result, err = this.MongoClient.Database(CONFIG.MgoDBName).Collection(SELFENTITY.${entityName}Col).Distinct(TC.TimeoutCtx.GetMongoOperate(0), field, query)
	if err != nil {
		return err
	}
	return nil
}

//查询所有${entityName}记录
func (this *${entityMongoRepoName}) Query${entityName}All(query map[string]interface{}, sorts map[string]interface{}) ([]*SELFENTITY.${entityName}, error) {
	entities := []*SELFENTITY.${entityName}{}
	cursor, err := this.MongoClient.Database(CONFIG.MgoDBName).Collection(SELFENTITY.${entityName}Col).Find(TC.TimeoutCtx.GetMongoOperate(0), query, options.Find().SetSort(sorts))
	if err = cursor.Err(); err != nil {
		return nil, err
	}
	defer cursor.Close(TC.TimeoutCtx.GetMongoOperate(0))
	for cursor.Next(TC.TimeoutCtx.GetMongoOperate(0)) {
		entity := SELFENTITY.${entityName}{}
		if err = cursor.Decode(&entity); err != nil {
			return nil, err
		}
		entities = append(entities, &entity)
	}
	return entities, nil
}

//查询${entityName}分页排序记录
func (this *${entityMongoRepoName}) Query${entityName}Page(query map[string]interface{}, limit int, sorts map[string]interface{}) ([]*SELFENTITY.${entityName}, error) {

	entities := []*SELFENTITY.${entityName}{}
	cursor, err := this.MongoClient.Database(CONFIG.MgoDBName).Collection(SELFENTITY.${entityName}Col).Find(TC.TimeoutCtx.GetMongoOperate(0), query, options.Find().SetLimit(int64(limit)), options.Find().SetSort(sorts))
	if err = cursor.Err(); err != nil {
		return nil, err
	}
	defer cursor.Close(TC.TimeoutCtx.GetMongoOperate(0))
	for cursor.Next(TC.TimeoutCtx.GetMongoOperate(0)) {
		entity := SELFENTITY.${entityName}{}
		if err = cursor.Decode(&entity); err != nil {
			return nil, err
		}
		entities = append(entities, &entity)
	}
	return entities, nil

}

//查询${entityName}数量
func (this *${entityMongoRepoName}) Query${entityName}Count(query map[string]interface{}) (int64, error) {
	count, err := this.MongoClient.Database(CONFIG.MgoDBName).Collection(SELFENTITY.${entityName}Col).CountDocuments(TC.TimeoutCtx.GetMongoOperate(0), query)
	if err != nil {
		return -1, err
	}
	return int64(count), nil
}

//更新${entityName}记录
func (this *${entityMongoRepoName}) Update${entityName}(selector, values map[string]interface{}) error {
	delete(values, "_id")
	_, err := this.MongoClient.Database(CONFIG.MgoDBName).Collection(SELFENTITY.${entityName}Col).UpdateMany(TC.TimeoutCtx.GetMongoOperate(0), selector, values)
	if err != nil {
		return err
	}
	return nil

}

//根据主键更新$${entityName}记录
func (this *${entityMongoRepoName}) Update${entityName}ByID(id interface{}, values map[string]interface{}) error {
	delete(values, "_id")
	_, err := this.MongoClient.Database(CONFIG.MgoDBName).Collection(SELFENTITY.${entityName}Col).UpdateOne(TC.TimeoutCtx.GetMongoOperate(0), map[string]interface{}{"_id": id}, values)
	if err != nil {
		return err
	}
	return nil

}

//删除${entityName}记录
func (this *${entityMongoRepoName}) Delete${entityName}(selector map[string]interface{}) error {
	_, err := this.MongoClient.Database(CONFIG.MgoDBName).Collection(SELFENTITY.${entityName}Col).DeleteMany(TC.TimeoutCtx.GetMongoOperate(0), selector)
	if err != nil {
		return err
	}
	return nil

}

//根据主键删除${entityName}记录
func (this *${entityMongoRepoName}) Delete${entityName}ByID(id interface{}) error {
	_, err := this.MongoClient.Database(CONFIG.MgoDBName).Collection(SELFENTITY.${entityName}Col).DeleteOne(TC.TimeoutCtx.GetMongoOperate(0), map[string]interface{}{"_id": id})
	if err != nil {
		return err
	}
	return nil

}

//插入${entityName}记录
func (this *${entityMongoRepoName}) Insert${entityName}(entities ...*SELFENTITY.${entityName}) error {
	entitiesInterface := []interface{}{}
	for _, entity := range entities {
		entitiesInterface = append(entitiesInterface, entity)
	}
	_, err := this.MongoClient.Database(CONFIG.MgoDBName).Collection(SELFENTITY.${entityName}Col).InsertMany(TC.TimeoutCtx.GetMongoOperate(0), entitiesInterface)
	if err != nil {
		return err
	}
	return nil
}

//关闭repo
func (this *${entityMongoRepoName}) Close() error {
	return nil
}
