////////////////////////////////////////////////// ${entityMongoRepoName} //////////////////////////////////////////////////
//获取${entityMongoRepoName}对象
func New${entityMongoRepoName}() REPO.${entityRepoInterfaceName} {
	return &${entityMongoRepoName}{session: MONGO.GetSession()}
}

//持久层mongo实现
type ${entityMongoRepoName} struct {
	session *mgo.Session
}


//查询一条${entityName}记录
func (this *${entityMongoRepoName})Query${entityName}One(query map[string]interface{}) (*SELFENTITY.${entityName},error) {
	entity := SELFENTITY.${entityName}{}
	err := this.session.DB(CONFIG.MgoDBName).C(SELFENTITY.${entityCollectionName}).Find(query).One(&entity)
	if err != nil {
		return nil, err
	}
	return &entity, nil
}

//通过主键查询一条${entityName}记录
func (this *${entityMongoRepoName})Get${entityName}ByID(id interface{}) (*SELFENTITY.${entityName},error) {
	entity := SELFENTITY.${entityName}{}
	err := this.session.DB(CONFIG.MgoDBName).C(SELFENTITY.${entityCollectionName}).FindId(id).One(&entity)
	if err != nil {
		return nil, err
	}
	return &entity, nil
}

//查询${entityName}指定字段
func (this *${entityMongoRepoName})Query${entityName}Distinct(query map[string]interface{},field string,result interface{}) (error) {
	err := this.session.DB(CONFIG.MgoDBName).C(SELFENTITY.${entityCollectionName}).Find(query).Distinct(field,result)
	if err != nil {
		return err
	}
	return nil
}

//查询所有${entityName}记录
func (this *${entityMongoRepoName})Query${entityName}All(query map[string]interface{}, sorts ...string) ([]*SELFENTITY.${entityName},error) {
    q := this.session.DB(CONFIG.MgoDBName).C(SELFENTITY.${entityCollectionName}).Find(query)
    if sorts != nil && len(sorts) > 0 {
        for _, s := range sorts {
            q.Sort(s)
        }
    }
	entities := []*SELFENTITY.${entityName}{}
    err:=q.All(&entities)
    if err!=nil{
        return nil,err
    }
	return entities, nil
}

//查询${entityName}分页排序记录
func (this *${entityMongoRepoName})Query${entityName}Page(query map[string]interface{}, limit int, sorts ...string) ([]*SELFENTITY.${entityName},error) {
	q := this.session.DB(CONFIG.MgoDBName).C(SELFENTITY.${entityCollectionName}).Find(query)
	if sorts != nil && len(sorts) > 0 {
		for _, s := range sorts {
			q.Sort(s)
		}
	}
	entities := []*SELFENTITY.${entityName}{}
	err:=q.Limit(limit).All(&entities)
    if err!=nil{
        return nil,err
    }
	return entities, nil

}

//查询${entityName}数量
func (this *${entityMongoRepoName})Query${entityName}Count(query map[string]interface{}) (int64,error) {
	count,err := this.session.DB(CONFIG.MgoDBName).C(SELFENTITY.${entityCollectionName}).Find(query).Count()
	if err != nil {
		return -1,err
	}
	return int64(count), nil
}

//更新${entityName}记录
func (this *${entityMongoRepoName}) Update${entityName}(selector , values map[string]interface{}) error {
    delete(values,"_id")
	_, err := this.session.DB(CONFIG.MgoDBName).C(SELFENTITY.${entityCollectionName}).UpdateAll(selector, bson.M{"$set": values})
	if err != nil {
		return err
	}
	return nil

}
//根据主键更新$${entityName}记录
func (this *${entityMongoRepoName}) Update${entityName}ByID(id interface{} , values map[string]interface{}) error {
    delete(values,"_id")
	err := this.session.DB(CONFIG.MgoDBName).C(SELFENTITY.${entityCollectionName}).UpdateId(id, bson.M{"$set": values})
	if err != nil {
		return err
	}
	return nil

}
//删除${entityName}记录
func (this *${entityMongoRepoName}) Delete${entityName}(selector map[string]interface{}) error {
	_, err := this.session.DB(CONFIG.MgoDBName).C(SELFENTITY.${entityCollectionName}).RemoveAll(selector)
	if err != nil {
		return err
	}
	return nil

}

//根据主键删除${entityName}记录
func (this *${entityMongoRepoName}) Delete${entityName}ByID(id interface{}) error {
	err := this.session.DB(CONFIG.MgoDBName).C(SELFENTITY.${entityCollectionName}).RemoveId(id)
	if err != nil {
		return err
	}
	return nil

}

//插入${entityName}记录
func (this *${entityMongoRepoName}) Insert${entityName}(entities ...*SELFENTITY.${entityName}) error {
	entitiesInterface:= []interface{}{}
	for _,entity:=range entities{
		entitiesInterface=append(entitiesInterface,entity)
	}
	err := this.session.DB(CONFIG.MgoDBName).C(SELFENTITY.${entityCollectionName}).Insert(entitiesInterface...)
	if err != nil {
		return err
	}
	return nil
}


//关闭repo
func (this *${entityMongoRepoName}) Close() error {
	this.session.Close()
	return nil
}
